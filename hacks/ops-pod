#!/bin/bash -e

# SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Gardener contributors
#
# SPDX-License-Identifier: Apache-2.0

# open terminal into cluster node

function print_usage() {
  cat <<EOF
ops-pod: Deploy privileged pod in a kubernetes cluster and open terminal into cluster node using the current kubectl context.
         When specifying <pod-name> the node of the specified pod will be used.

Usage:
  ops-pod [OPTIONS] <node|pod-name>

Options:
  -n|--namespace    The namespace into which the pod will be deployed. The namespace of the current kubectl context is used by default.
  -t|--tolerations  When this flag is set the taints of the selected node will be used as tolerations for the ops pod. By default
                    the ops pod is started with the following tolerations:
                     - key: node-role.kubernetes.io/master
                       operator: Exists
                       effect: NoSchedule
                     - operator: Exists
                       effect: NoExecute
                     - key: CriticalAddonsOnly
                       operator: Exists
  -i|--image        Image to use for the privileged pod. The default value is: europe-docker.pkg.dev/sap-se-gcp-k8s-delivery/releases-public/eu_gcr_io/gardener-project/gardener/ops-toolbelt:latest
  -c|--chroot       When this flag is set the host's root directory will also be used as root directory of the pod. By default the host's
                    root directory is mounted under /host on the pod.
  -o|--hostnetwork  Whether to change the hostNetwork attribute to true.
EOF
}

FALSE=0
TRUE=1

namespace=
node=
image=
tolerations_array="
  - operator: Exists
"
hostnetwork="false"
copy_tolerations=${FALSE}
node_chroot=${FALSE}
sanitize_hostname() {
  # K8s rejects pod names that violate this RE '[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*'
  # due to RFC1123 (Only allow lower-case and alphanumerical values for hostnames)
  echo "$@" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g'
}
name="$(sanitize_hostname "ops-pod-$(whoami)")"

default_image="europe-docker.pkg.dev/gardener-project/releases/gardener/ops-toolbelt:latest"
function get_default_namespace() {
  _namespace=$(kubectl config view -o jsonpath="{.contexts[?(@.name == \"$(kubectl config current-context)\")].context.namespace}")
  echo "${_namespace:-default}"
}

positional=()
while [[ $# -gt 0 ]]; do
  key="${1}"
  case ${key} in
  -n | --namespace)
    namespace="${2}"
    shift
    shift
    ;;
  -i | --image)
    image="${2}"
    shift
    shift
    ;;
  -c | --chroot)
    node_chroot=${TRUE}
    shift
    ;;
  -t | --toleration)
    copy_tolerations=${TRUE}
    shift
    ;;
  -o | --hostnetwork)
    hostnetwork="true"
    shift
    ;;
  -h | --help)
    print_usage
    exit 0
    ;;
  *)
    positional+=("${1}")
    shift
    ;;
  esac
done

if [[ ${#positional[@]} -ne 1 ]]; then
  echo -e "Error: Required one positional argument: <node|pod-name> found ${#positional[@]}\n"
  print_usage
  exit 1
fi

node=${positional[0]}
image=${image:-$default_image}
namespace=${namespace:-$(get_default_namespace)}

node_of_pod=$(kubectl -n "${namespace}" get pod "${node}" -o 'jsonpath={.spec.nodeName}' 2>/dev/null || true)
if [[ -n ${node_of_pod} ]]; then
  echo -e "Pod name provided. Deploying ops pod on the node where ${node} is running: ${node_of_pod}\n"
  node=$node_of_pod
else
  echo "Node name provided ..."
  # shellcheck disable=SC2076
  if [[ $(kubectl get nodes -o jsonpath='{.items[*].metadata.name}') =~ " ${node} " ]]; then
    echo -e "Deploying ops pod on ${node}\n"
  else
    echo -e "Error: node ${node} does not exist in the cluster.\n"
    print_usage
  fi
fi

# check if the node name was a pod name and we should actually identify the node from the pod (node that runs the pod)

# Kubify nodes have labels that differ from the names (need an additional suffix)
node=$(echo "$node" | sed -r "s/^(garden-.*)/\1.openstack.local/")

if [[ $copy_tolerations -eq $TRUE ]]; then
  tolerations_array=$(kubectl get nodes "${node}" -o jsonpath='{range .spec.taints[*]}  - effect: "{@.effect}"{"\n"}    key: "{@.key}"{"\n"}    value: "{@.value}"{"\n"}    operator: "{@.operator}"{"\n"}{end}')
fi

# get rid of former pod (if present; best effort)
kubectl -n "${namespace}" delete pod "${name}" &>/dev/null || true
while kubectl -n "${namespace}" get pod "${name}" &>/dev/null; do
  echo "Waiting for old pod to be deleted..."
  sleep 1
done

# get rid of pod
# shellcheck disable=SC2064
trap "EC=\$?; kubectl -n ${namespace} delete pod ${name} --wait=false  >&2 || true; exit \$EC" EXIT INT TERM

# launch pod
kubectl -n "${namespace}" create -f <(
  cat <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: $name
spec:
  $([[ -n $node ]] && echo -e "nodeSelector:\n    kubernetes.io/hostname: $node")
  tolerations:
$tolerations_array
  containers:
  - name: ops-pod
    image: ${image}
    command:
    - sleep
    - "43200"
    resources:
      limits:
        cpu: 200m
        memory: 100Mi
      requests:
        cpu: 100m
        memory: 50Mi
    stdin: true
    securityContext:
      privileged: true
    volumeMounts:
    - name: host-root-volume
      mountPath: /host
      readOnly: false
      mountPropagation: HostToContainer
  volumes:
  - name: host-root-volume
    hostPath:
      path: /
  hostNetwork: ${hostnetwork}
  hostPID: true
  restartPolicy: Never
  enableServiceLinks: false
EOF
)

while [[ $(kubectl -n "${namespace}" get pods | sed -n -r "s/^$name.*Running.*$/Running/p") != "Running" ]]; do
  echo "Waiting for pod to be running..."
  sleep 1
done

# exec into pod (and chroot into node if a node was selected)
if [[ ${node_chroot} -eq ${TRUE} ]]; then
  # shellcheck disable=SC2016
  kubectl -n "${namespace}" exec -ti "${name}" -- bash -c 'rm -rf /host/root/dotfiles 1> /dev/null; \
                                                   cp -r /root/dotfiles /host/root 1> /dev/null; \
                                                   cp -r /hacks /host 1> /dev/null; rm -f /host/root/.bashrc; \
                                                   ln -s /root/dotfiles/.bashrc /host/root/.bashrc 1> /dev/null; export PATH="/hacks:$PATH"; \
                                                   echo -e "\nBE CAREFUL!!! Node root directory mounted under / \n"; \
                                                   chroot /host /bin/bash'
else
  kubectl -n "${namespace}" exec -ti "${name}" -- bash -c "echo -e '\nNode root dir is mounted under /host' >> /etc/motd; /bin/bash"
fi

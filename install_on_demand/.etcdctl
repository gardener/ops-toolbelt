#! /usr/bin/env bash

# SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Gardener contributors
#
# SPDX-License-Identifier: Apache-2.0

alias etcdctl="etcdctl_install"
function etcdctl_install() {
  app="etcdctl"
  install_func='/nonroot/hacks/install_etcdctl'

  if ! hash "${app}" &> /dev/null; then
    "${install_func}" 1>&2
  fi
  command "${app}" $(_etcdctl_prepend_args "$@")
}

# checks passed arguments and fills in args for certificates
function _etcdctl_prepend_args(){
  local cert_args=()
  local args=()
  local pid
  local nc_timeout=5
  local etcd_host="etcd-main-local"
  local etcd_port=2379
  local red="\033[1;31m"
  local nc="\033[0m"

  pid="$(get_etcd_pid)"
  if [ "${pid}" == "" ]; then
    echo "etcd is not running" 1>&2
    return
  fi
  if [ "${#}" -ne 0 ]; then
    args=("$@")
  fi

  if ! _check_arg_present "--help" "${args[@]}"; then
    echo "${args[*]}"
    return
  fi

  if _check_arg_present "--cert" "${args[@]}"; then
    if [ -f "/proc/$(get_etcd_pid)/root/var/etcd/ssl/client/client/tls.crt" ]; then
      cert_args+=("--cert=/proc/$(get_etcd_pid)/root/var/etcd/ssl/client/client/tls.crt")
    else
      echo "TLS certificate not found in the expected path." 1>&2
      echo -e "${red}You can use --cert=/path/to/file${nc}" 1>&2
    fi
  fi
  if _check_arg_present "--key" "${args[@]}"; then
    if [ -f "/proc/$(get_etcd_pid)/root/var/etcd/ssl/client/client/tls.key" ]; then
      cert_args+=("--key=/proc/$(get_etcd_pid)/root/var/etcd/ssl/client/client/tls.key")
    else
      echo "TLS key not found in the expected path." 1>&2
      echo -e "${red}You can use --key=/path/to/file${nc}" 1>&2
    fi
  fi
  if _check_arg_present "--cacert" "${args[@]}"; then
    if [ -f "/proc/$(get_etcd_pid)/root/var/etcd/ssl/client/ca/bundle.crt" ]; then
      cert_args+=("--cacert=/proc/$(get_etcd_pid)/root/var/etcd/ssl/client/ca/bundle.crt")
    else
      echo "CA certificate not found in the expected path." 1>&2
      echo -e "${red}You can use --cacert=/path/to/file${nc}" 1>&2
    fi
  fi
  if _check_arg_present "--endpoints" "${args[@]}"; then
    if nc -z -w "${nc_timeout}" "${etcd_host}" "${etcd_port}" 1>/dev/bull 2>/dev/null; then
      cert_args+=("--endpoints=https://${etcd_host}:${etcd_port}")
    else
      echo "etcd host https://${etcd_host}:${etcd_port} not reachable within ${nc_timeout} seconds" 1>&2
      # shellcheck disable=SC2016
      echo -e "${red}You can use --endpoints=https://"'${ETCD_HOST}:${ETCD_PORT}'"${nc}" 1>&2
    fi
  fi
  if _check_arg_present "--keepalive-timeout" "${args[@]}"; then
    cert_args+=("--keepalive-timeout=2m")
  fi
  if _check_arg_present "--keepalive-time" "${args[@]}"; then
    cert_args+=("--keepalive-time=2m")
  fi
  if _check_arg_present "--dial-timeout" "${args[@]}"; then
    cert_args+=("--dial-timeout=2m")
  fi
  if _check_arg_present "--dial-timeout" "${args[@]}"; then
    cert_args+=("--dial-timeout=2m")
  fi
  args=("${args[@]}" "${cert_args[@]}")
  echo "${args[*]}"
}

function _check_arg_present(){
  local starts_with="${1}"
  shift
  local args=("$@")
  for arg in "${args[@]}"; do
    if [[ "${arg}" == "${starts_with}[= ]"* ]]; then
      return 1
    fi
  done
  return 0
}

function get_etcd_pid() {
  pgrep wrapper
}
